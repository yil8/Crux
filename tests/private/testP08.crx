// print out results of finite automata rule 22

var colcount : int;
var rowcount : int;
var rule : int;
array data : int[82];
array rulebin : int[2][2][2];

func setNextBit(last:int, akt:int, next:int, bits:int) : int{
  let rulebin[last][akt][next] = bits - (bits / 2) * 2;
  return bits / 2;
}

func initrulebin() : void {
  var bits : int;
  let bits = rule;
  let bits = ::setNextBit(0, 0, 0, bits);
  let bits = ::setNextBit(0, 0, 1, bits);
  let bits = ::setNextBit(0, 1, 0, bits);
  let bits = ::setNextBit(0, 1, 1, bits);
  let bits = ::setNextBit(1, 0, 0, bits);
  let bits = ::setNextBit(1, 0, 1, bits);
  let bits = ::setNextBit(1, 1, 0, bits);
  let bits = ::setNextBit(1, 1, 1, bits);
}

func clearData() : void {
  var i : int;
  let i = 0;
  while (i < colcount + 2) {
    let data[i] = 0;
    let i = i + 1;
  }
}

func output() : void {
  var i : int;

  let i = 1;
  while (i <= colcount) {
    if (data[i] == 0) {
      ::printInt(1);
    } else {
      if (data[i] == 1) {
        ::printInt(8);
      } else {
        ::printInt(0);
      }
    }
    let i = i + 1;
  }
  ::println();
}
   
func calcnext() : void {
  var i : int;
  var last: int;
  var akt: int;
  var next: int;

  let data[0] = data[1];
  let data[colcount + 1] = data[colcount];

  let last = data[0];
  let akt = data[1];

  let i = 1;
  while (i <= colcount) {
    let next = data[i+1];
    let data[i] = rulebin[last][akt][next];

    let last = akt;
    let akt = next;
    let i = i + 1;
  }
}

func run() : void {
  var i : int;
  let i = 0;
  while (i < rowcount) {
    ::output();
    ::calcnext();
    let i = i + 1;
  }
}

func main() : void {
  let colcount = 80;
  let rowcount = 60;

  let rule = 22;
  ::initrulebin();

  ::clearData();
  let data[40] = 1;
  
  ::printInt(rule);
  ::println();
  ::run();
}

